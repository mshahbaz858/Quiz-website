{"ast":null,"code":"import \"core-js/modules/es.array.index-of\";\nimport \"core-js/modules/es.array.map\";\nimport \"core-js/modules/es.regexp.constructor\";\nimport \"core-js/modules/es.regexp.exec\";\nimport \"core-js/modules/es.regexp.to-string\";\nimport \"core-js/modules/es.string.replace\";\nimport \"core-js/modules/es.string.split\";\nimport escapeRegExp from 'lodash/escapeRegExp'; // We’re using this file to handle the hash to develop the routes, there are two types of hash '#/' and '#!/'\n// However, it is a temporal solution because is necessary using a library third-party that it is his focus\n// You can find more information here:\n// https://github.com/styleguidist/react-styleguidist/pull/993\n\nvar defaultPrependHash = '#/';\nvar separator = '/';\nvar hashValRegexp = /(.*)\\?/;\n\nfunction trimHash(hash, prependHash) {\n  if (!hash) {\n    return '';\n  }\n\n  var regexp = new RegExp('^' + escapeRegExp(prependHash || defaultPrependHash), 'g');\n  return hash.replace(regexp, '');\n}\n\nvar trimParams = function trimParams(hash) {\n  var result = hashValRegexp.exec(hash);\n  return result && result[1] || hash;\n};\n/**\n * If hash has a certain element\n *\n * @param {string} hash\n * @param {string} search\n * @return {boolean}\n */\n\n\nexport var hasInHash = function hasInHash(hash, search) {\n  return hash !== '' && hash.indexOf(search) > -1;\n};\n/**\n * Get hash value without '#', prependHash and parameters\n *\n * @param {string} hash\n * @param {string} prependHash\n * @return {string}\n */\n\nexport var getHash = function getHash(hash, prependHash) {\n  return decodeURIComponent(trimParams(trimHash(hash, prependHash)));\n};\n/**\n * Get hash value split into an Array.\n *\n * @param {string} hash\n * @param {string} prependHash\n * @return {Array.<string>}\n */\n\nexport var getHashAsArray = function getHashAsArray(hash, prependHash) {\n  return trimParams(trimHash(hash, prependHash)).split(separator).map(decodeURIComponent);\n};\n/**\n * Get a parameter by name in hash\n *\n * @param {string} hash\n * @param {string} name\n * @return {string}\n */\n\nexport var getParameterByName = function getParameterByName(hash, name) {\n  name = name.replace(/[[\\]]/g, '\\\\$&');\n  var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)');\n  var results = regex.exec(hash);\n\n  if (!results) {\n    return null;\n  }\n\n  if (!results[2]) {\n    return '';\n  }\n\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n};","map":{"version":3,"sources":["D:/DEVELOPMENT/react-project/Quiz-react/react-quiz-app/node_modules/react-styleguidist/lib/client/utils/handleHash.js"],"names":["escapeRegExp","defaultPrependHash","separator","hashValRegexp","trimHash","hash","prependHash","regexp","RegExp","replace","trimParams","result","exec","hasInHash","search","indexOf","getHash","decodeURIComponent","getHashAsArray","split","map","getParameterByName","name","regex","results"],"mappings":"AAAA,OAAO,mCAAP;AACA,OAAO,8BAAP;AACA,OAAO,uCAAP;AACA,OAAO,gCAAP;AACA,OAAO,qCAAP;AACA,OAAO,mCAAP;AACA,OAAO,iCAAP;AACA,OAAOA,YAAP,MAAyB,qBAAzB,C,CAAgD;AAChD;AACA;AACA;;AAEA,IAAIC,kBAAkB,GAAG,IAAzB;AACA,IAAIC,SAAS,GAAG,GAAhB;AACA,IAAIC,aAAa,GAAG,QAApB;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwBC,WAAxB,EAAqC;AACnC,MAAI,CAACD,IAAL,EAAW;AACT,WAAO,EAAP;AACD;;AAED,MAAIE,MAAM,GAAG,IAAIC,MAAJ,CAAW,MAAMR,YAAY,CAACM,WAAW,IAAIL,kBAAhB,CAA7B,EAAkE,GAAlE,CAAb;AACA,SAAOI,IAAI,CAACI,OAAL,CAAaF,MAAb,EAAqB,EAArB,CAAP;AACD;;AAED,IAAIG,UAAU,GAAG,SAASA,UAAT,CAAoBL,IAApB,EAA0B;AACzC,MAAIM,MAAM,GAAGR,aAAa,CAACS,IAAd,CAAmBP,IAAnB,CAAb;AACA,SAAOM,MAAM,IAAIA,MAAM,CAAC,CAAD,CAAhB,IAAuBN,IAA9B;AACD,CAHD;AAIA;;;;;;;;;AASA,OAAO,IAAIQ,SAAS,GAAG,SAASA,SAAT,CAAmBR,IAAnB,EAAyBS,MAAzB,EAAiC;AACtD,SAAOT,IAAI,KAAK,EAAT,IAAeA,IAAI,CAACU,OAAL,CAAaD,MAAb,IAAuB,CAAC,CAA9C;AACD,CAFM;AAGP;;;;;;;;AAQA,OAAO,IAAIE,OAAO,GAAG,SAASA,OAAT,CAAiBX,IAAjB,EAAuBC,WAAvB,EAAoC;AACvD,SAAOW,kBAAkB,CAACP,UAAU,CAACN,QAAQ,CAACC,IAAD,EAAOC,WAAP,CAAT,CAAX,CAAzB;AACD,CAFM;AAGP;;;;;;;;AAQA,OAAO,IAAIY,cAAc,GAAG,SAASA,cAAT,CAAwBb,IAAxB,EAA8BC,WAA9B,EAA2C;AACrE,SAAOI,UAAU,CAACN,QAAQ,CAACC,IAAD,EAAOC,WAAP,CAAT,CAAV,CAAwCa,KAAxC,CAA8CjB,SAA9C,EAAyDkB,GAAzD,CAA6DH,kBAA7D,CAAP;AACD,CAFM;AAGP;;;;;;;;AAQA,OAAO,IAAII,kBAAkB,GAAG,SAASA,kBAAT,CAA4BhB,IAA5B,EAAkCiB,IAAlC,EAAwC;AACtEA,EAAAA,IAAI,GAAGA,IAAI,CAACb,OAAL,CAAa,QAAb,EAAuB,MAAvB,CAAP;AACA,MAAIc,KAAK,GAAG,IAAIf,MAAJ,CAAW,SAASc,IAAT,GAAgB,mBAA3B,CAAZ;AACA,MAAIE,OAAO,GAAGD,KAAK,CAACX,IAAN,CAAWP,IAAX,CAAd;;AAEA,MAAI,CAACmB,OAAL,EAAc;AACZ,WAAO,IAAP;AACD;;AAED,MAAI,CAACA,OAAO,CAAC,CAAD,CAAZ,EAAiB;AACf,WAAO,EAAP;AACD;;AAED,SAAOP,kBAAkB,CAACO,OAAO,CAAC,CAAD,CAAP,CAAWf,OAAX,CAAmB,KAAnB,EAA0B,GAA1B,CAAD,CAAzB;AACD,CAdM","sourcesContent":["import \"core-js/modules/es.array.index-of\";\nimport \"core-js/modules/es.array.map\";\nimport \"core-js/modules/es.regexp.constructor\";\nimport \"core-js/modules/es.regexp.exec\";\nimport \"core-js/modules/es.regexp.to-string\";\nimport \"core-js/modules/es.string.replace\";\nimport \"core-js/modules/es.string.split\";\nimport escapeRegExp from 'lodash/escapeRegExp'; // We’re using this file to handle the hash to develop the routes, there are two types of hash '#/' and '#!/'\n// However, it is a temporal solution because is necessary using a library third-party that it is his focus\n// You can find more information here:\n// https://github.com/styleguidist/react-styleguidist/pull/993\n\nvar defaultPrependHash = '#/';\nvar separator = '/';\nvar hashValRegexp = /(.*)\\?/;\n\nfunction trimHash(hash, prependHash) {\n  if (!hash) {\n    return '';\n  }\n\n  var regexp = new RegExp('^' + escapeRegExp(prependHash || defaultPrependHash), 'g');\n  return hash.replace(regexp, '');\n}\n\nvar trimParams = function trimParams(hash) {\n  var result = hashValRegexp.exec(hash);\n  return result && result[1] || hash;\n};\n/**\n * If hash has a certain element\n *\n * @param {string} hash\n * @param {string} search\n * @return {boolean}\n */\n\n\nexport var hasInHash = function hasInHash(hash, search) {\n  return hash !== '' && hash.indexOf(search) > -1;\n};\n/**\n * Get hash value without '#', prependHash and parameters\n *\n * @param {string} hash\n * @param {string} prependHash\n * @return {string}\n */\n\nexport var getHash = function getHash(hash, prependHash) {\n  return decodeURIComponent(trimParams(trimHash(hash, prependHash)));\n};\n/**\n * Get hash value split into an Array.\n *\n * @param {string} hash\n * @param {string} prependHash\n * @return {Array.<string>}\n */\n\nexport var getHashAsArray = function getHashAsArray(hash, prependHash) {\n  return trimParams(trimHash(hash, prependHash)).split(separator).map(decodeURIComponent);\n};\n/**\n * Get a parameter by name in hash\n *\n * @param {string} hash\n * @param {string} name\n * @return {string}\n */\n\nexport var getParameterByName = function getParameterByName(hash, name) {\n  name = name.replace(/[[\\]]/g, '\\\\$&');\n  var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)');\n  var results = regex.exec(hash);\n\n  if (!results) {\n    return null;\n  }\n\n  if (!results[2]) {\n    return '';\n  }\n\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n};"]},"metadata":{},"sourceType":"module"}