{"ast":null,"code":"import \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.array.index-of\";\nimport \"core-js/modules/es.array.join\";\nimport \"core-js/modules/es.array.map\";\nimport \"core-js/modules/es.function.name\";\nimport \"core-js/modules/es.regexp.exec\";\nimport \"core-js/modules/es.string.replace\";\nimport \"core-js/modules/es.string.anchor\";\n/* Returns the HashPath to be included in the isolated page view url */\n\nfunction getCurrentHashPath(stripFragment, stripTrailingSlash, currentHash) {\n  /*This pattern matches urls like http://hostname.com/#button etc.,\n  these urls are generated when we click on a component in the side nav-bar.\n  This will verify whether the first character after the '#' symbol is an alphanumeric char or \"_\".\n  this pattern used to validate the components names.*/\n  var hashUrlPattern = /^#[a-zA-Z0-9_]/; // Ex. matches \"#button\",\"#1button\",\"#_button\"\n\n  /* This pattern matches \"#!/\" string pattern in the 'currentHash' const\n  this url pattern is used to show isolated page view mode in this project. */\n\n  var isolatedPageViewUrlPattern = /^#!\\//; // Ex. matches \"#!/button\"\n\n  if (hashUrlPattern.test(currentHash)) {\n    return '';\n  } else {\n    return currentHash && !isolatedPageViewUrlPattern.test(currentHash) ? currentHash.replace(stripFragment, '').replace(stripTrailingSlash, '') + '/' : '';\n  }\n}\n/**\n * Gets the URL fragment for an isolated or nochrome link.\n *\n * @param {string} $.currentHash The current hash fragment of the page\n * @param {string} $.encodedName The URL encoded name of the component\n * @return {string}\n */\n\n\nfunction buildIsolatedOrNoChromeFragment(_ref) {\n  var currentHash = _ref.currentHash,\n      encodedName = _ref.encodedName;\n  var stripFragment = /^#\\/?/;\n  var stripTrailingSlash = /\\/$/;\n  var currentHashPath = getCurrentHashPath(stripFragment, stripTrailingSlash, currentHash);\n  return \"#!/\" + currentHashPath + encodedName;\n}\n/**\n * Get component / section URL.\n *\n * @param {GetUrlOptions} options\n * @param location Location object (will use current page location by default)\n * @return {string}\n */\n\n\nexport default function getUrl(_temp, _temp2) {\n  var _ref2 = _temp === void 0 ? {} : _temp,\n      name = _ref2.name,\n      slug = _ref2.slug,\n      example = _ref2.example,\n      anchor = _ref2.anchor,\n      isolated = _ref2.isolated,\n      nochrome = _ref2.nochrome,\n      absolute = _ref2.absolute,\n      hashPath = _ref2.hashPath,\n      useSlugAsIdParam = _ref2.useSlugAsIdParam,\n      takeHash = _ref2.takeHash;\n\n  var _ref3 = _temp2 === void 0 ? window.location : _temp2,\n      origin = _ref3.origin,\n      pathname = _ref3.pathname,\n      _ref3$hash = _ref3.hash,\n      hash = _ref3$hash === void 0 ? '' : _ref3$hash;\n\n  var url = pathname;\n  var currentHash = hash.indexOf('?') > -1 ? hash.substring(0, hash.indexOf('?')) : hash;\n\n  if (takeHash) {\n    url += currentHash;\n  }\n\n  if (nochrome) {\n    url += '?nochrome';\n  }\n\n  var encodedName = encodeURIComponent(name || '');\n\n  if (anchor) {\n    url += \"#\" + slug;\n  } else if (isolated || nochrome) {\n    url += buildIsolatedOrNoChromeFragment({\n      currentHash: currentHash,\n      encodedName: encodedName\n    });\n  }\n\n  if (hashPath) {\n    var encodedHashPath = hashPath.map(encodeURIComponent);\n\n    if (!useSlugAsIdParam) {\n      encodedHashPath = [].concat(encodedHashPath, [encodedName]);\n    }\n\n    url += \"#/\" + encodedHashPath.join('/');\n  }\n\n  if (useSlugAsIdParam) {\n    url += \"?id=\" + slug;\n  }\n\n  if (example !== undefined) {\n    url += \"/\" + example;\n  }\n\n  if (absolute) {\n    return origin + url;\n  }\n\n  return url;\n}","map":{"version":3,"sources":["D:/DEVELOPMENT/react-project/Quiz-react/react-quiz-app/node_modules/react-styleguidist/lib/client/utils/getUrl.js"],"names":["getCurrentHashPath","stripFragment","stripTrailingSlash","currentHash","hashUrlPattern","isolatedPageViewUrlPattern","test","replace","buildIsolatedOrNoChromeFragment","_ref","encodedName","currentHashPath","getUrl","_temp","_temp2","_ref2","name","slug","example","anchor","isolated","nochrome","absolute","hashPath","useSlugAsIdParam","takeHash","_ref3","window","location","origin","pathname","_ref3$hash","hash","url","indexOf","substring","encodeURIComponent","encodedHashPath","map","concat","join","undefined"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.array.index-of\";\nimport \"core-js/modules/es.array.join\";\nimport \"core-js/modules/es.array.map\";\nimport \"core-js/modules/es.function.name\";\nimport \"core-js/modules/es.regexp.exec\";\nimport \"core-js/modules/es.string.replace\";\nimport \"core-js/modules/es.string.anchor\";\n\n/* Returns the HashPath to be included in the isolated page view url */\nfunction getCurrentHashPath(stripFragment, stripTrailingSlash, currentHash) {\n  /*This pattern matches urls like http://hostname.com/#button etc.,\n  these urls are generated when we click on a component in the side nav-bar.\n  This will verify whether the first character after the '#' symbol is an alphanumeric char or \"_\".\n  this pattern used to validate the components names.*/\n  var hashUrlPattern = /^#[a-zA-Z0-9_]/; // Ex. matches \"#button\",\"#1button\",\"#_button\"\n\n  /* This pattern matches \"#!/\" string pattern in the 'currentHash' const\n  this url pattern is used to show isolated page view mode in this project. */\n\n  var isolatedPageViewUrlPattern = /^#!\\//; // Ex. matches \"#!/button\"\n\n  if (hashUrlPattern.test(currentHash)) {\n    return '';\n  } else {\n    return currentHash && !isolatedPageViewUrlPattern.test(currentHash) ? currentHash.replace(stripFragment, '').replace(stripTrailingSlash, '') + '/' : '';\n  }\n}\n/**\n * Gets the URL fragment for an isolated or nochrome link.\n *\n * @param {string} $.currentHash The current hash fragment of the page\n * @param {string} $.encodedName The URL encoded name of the component\n * @return {string}\n */\n\n\nfunction buildIsolatedOrNoChromeFragment(_ref) {\n  var currentHash = _ref.currentHash,\n      encodedName = _ref.encodedName;\n  var stripFragment = /^#\\/?/;\n  var stripTrailingSlash = /\\/$/;\n  var currentHashPath = getCurrentHashPath(stripFragment, stripTrailingSlash, currentHash);\n  return \"#!/\" + currentHashPath + encodedName;\n}\n\n/**\n * Get component / section URL.\n *\n * @param {GetUrlOptions} options\n * @param location Location object (will use current page location by default)\n * @return {string}\n */\nexport default function getUrl(_temp, _temp2) {\n  var _ref2 = _temp === void 0 ? {} : _temp,\n      name = _ref2.name,\n      slug = _ref2.slug,\n      example = _ref2.example,\n      anchor = _ref2.anchor,\n      isolated = _ref2.isolated,\n      nochrome = _ref2.nochrome,\n      absolute = _ref2.absolute,\n      hashPath = _ref2.hashPath,\n      useSlugAsIdParam = _ref2.useSlugAsIdParam,\n      takeHash = _ref2.takeHash;\n\n  var _ref3 = _temp2 === void 0 ? window.location : _temp2,\n      origin = _ref3.origin,\n      pathname = _ref3.pathname,\n      _ref3$hash = _ref3.hash,\n      hash = _ref3$hash === void 0 ? '' : _ref3$hash;\n\n  var url = pathname;\n  var currentHash = hash.indexOf('?') > -1 ? hash.substring(0, hash.indexOf('?')) : hash;\n\n  if (takeHash) {\n    url += currentHash;\n  }\n\n  if (nochrome) {\n    url += '?nochrome';\n  }\n\n  var encodedName = encodeURIComponent(name || '');\n\n  if (anchor) {\n    url += \"#\" + slug;\n  } else if (isolated || nochrome) {\n    url += buildIsolatedOrNoChromeFragment({\n      currentHash: currentHash,\n      encodedName: encodedName\n    });\n  }\n\n  if (hashPath) {\n    var encodedHashPath = hashPath.map(encodeURIComponent);\n\n    if (!useSlugAsIdParam) {\n      encodedHashPath = [].concat(encodedHashPath, [encodedName]);\n    }\n\n    url += \"#/\" + encodedHashPath.join('/');\n  }\n\n  if (useSlugAsIdParam) {\n    url += \"?id=\" + slug;\n  }\n\n  if (example !== undefined) {\n    url += \"/\" + example;\n  }\n\n  if (absolute) {\n    return origin + url;\n  }\n\n  return url;\n}"]},"metadata":{},"sourceType":"module"}