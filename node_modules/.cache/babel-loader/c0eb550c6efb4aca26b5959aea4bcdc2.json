{"ast":null,"code":"(function () {\n  var fnNameMatchRegex = /^\\s*function(?:\\s|\\s*\\/\\*.*\\*\\/\\s*)+([^\\(\\s\\/]*)\\s*/;\n\n  function _name() {\n    var match, name;\n\n    if (this === Function || this === Function.prototype.constructor) {\n      name = \"Function\";\n    } else if (this !== Function.prototype) {\n      match = (\"\" + this).match(fnNameMatchRegex);\n      name = match && match[1];\n    }\n\n    return name || \"\";\n  } // Inspect the polyfill-ability of this browser\n\n\n  var needsPolyfill = !(\"name\" in Function.prototype && \"name\" in function x() {});\n\n  var canDefineProp = typeof Object.defineProperty === \"function\" && function () {\n    var result;\n\n    try {\n      Object.defineProperty(Function.prototype, \"_xyz\", {\n        get: function get() {\n          return \"blah\";\n        },\n        configurable: true\n      });\n      result = Function.prototype._xyz === \"blah\";\n      delete Function.prototype._xyz;\n    } catch (e) {\n      result = false;\n    }\n\n    return result;\n  }();\n\n  var canDefineGetter = typeof Object.prototype.__defineGetter__ === \"function\" && function () {\n    var result;\n\n    try {\n      Function.prototype.__defineGetter__(\"_abc\", function () {\n        return \"foo\";\n      });\n\n      result = Function.prototype._abc === \"foo\";\n      delete Function.prototype._abc;\n    } catch (e) {\n      result = false;\n    }\n\n    return result;\n  }(); // Add the \"private\" property for testing, even if the real property can be polyfilled\n\n\n  Function.prototype._name = _name; // Polyfill it!\n  // For:\n  //  * IE >=9 <12\n  //  * Chrome <33\n\n  if (needsPolyfill) {\n    // For:\n    //  * IE >=9 <12\n    //  * Chrome >=5 <33\n    if (canDefineProp) {\n      Object.defineProperty(Function.prototype, \"name\", {\n        get: function get() {\n          var name = _name.call(this); // Since named function definitions have immutable names, also memoize the\n          // output by defining the `name` property directly on this Function\n          // instance so that this polyfill will not need to be invoked again\n\n\n          if (this !== Function.prototype) {\n            Object.defineProperty(this, \"name\", {\n              value: name,\n              configurable: true\n            });\n          }\n\n          return name;\n        },\n        configurable: true\n      });\n    } // For:\n    //  * Chrome <5\n    else if (canDefineGetter) {\n        // NOTE:\n        // The snippet:\n        //\n        //     x.__defineGetter__('y', z);\n        //\n        // ...is essentially equivalent to:\n        //\n        //     Object.defineProperty(x, 'y', {\n        //       get: z,\n        //       configurable: true,  // <-- key difference #1\n        //       enumerable: true     // <-- key difference #2\n        //     });\n        //\n        Function.prototype.__defineGetter__(\"name\", function () {\n          var name = _name.call(this); // Since named function definitions have immutable names, also memoize the\n          // output by defining the `name` property directly on this Function\n          // instance so that this polyfill will not need to be invoked again\n\n\n          if (this !== Function.prototype) {\n            this.__defineGetter__(\"name\", function () {\n              return name;\n            });\n          }\n\n          return name;\n        });\n      }\n  }\n})();","map":{"version":3,"sources":["D:/DEVELOPMENT/react-project/Quiz-react/react-quiz-app/node_modules/function.name-polyfill/Function.name.js"],"names":["fnNameMatchRegex","_name","match","name","Function","prototype","constructor","needsPolyfill","x","canDefineProp","Object","defineProperty","result","get","configurable","_xyz","e","canDefineGetter","__defineGetter__","_abc","call","value"],"mappings":"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","sourcesContent":["(function() {\n\nvar fnNameMatchRegex = /^\\s*function(?:\\s|\\s*\\/\\*.*\\*\\/\\s*)+([^\\(\\s\\/]*)\\s*/;\n\nfunction _name() {\n  var match, name;\n  if (this === Function || this === Function.prototype.constructor) {\n    name = \"Function\";\n  }\n  else if (this !== Function.prototype) {\n    match = (\"\" + this).match(fnNameMatchRegex);\n    name = match && match[1];\n  }\n  return name || \"\";\n}\n\n// Inspect the polyfill-ability of this browser\nvar needsPolyfill = !(\"name\" in Function.prototype && \"name\" in (function x() {}));\nvar canDefineProp = typeof Object.defineProperty === \"function\" &&\n  (function() {\n    var result;\n    try {\n      Object.defineProperty(Function.prototype, \"_xyz\", {\n        get: function() {\n          return \"blah\";\n        },\n        configurable: true\n      });\n      result = Function.prototype._xyz === \"blah\";\n      delete Function.prototype._xyz;\n    }\n    catch (e) {\n      result = false;\n    }\n    return result;\n  })();\nvar canDefineGetter = typeof Object.prototype.__defineGetter__ === \"function\" &&\n  (function() {\n    var result;\n    try {\n      Function.prototype.__defineGetter__(\"_abc\", function() {\n        return \"foo\";\n      });\n      result = Function.prototype._abc === \"foo\";\n      delete Function.prototype._abc;\n    }\n    catch (e) {\n      result = false;\n    }\n    return result;\n  })();\n\n\n\n// Add the \"private\" property for testing, even if the real property can be polyfilled\nFunction.prototype._name = _name;\n\n\n// Polyfill it!\n// For:\n//  * IE >=9 <12\n//  * Chrome <33\nif (needsPolyfill) {\n  // For:\n  //  * IE >=9 <12\n  //  * Chrome >=5 <33\n  if (canDefineProp) {\n    Object.defineProperty(Function.prototype, \"name\", {\n      get: function() {\n        var name = _name.call(this);\n\n        // Since named function definitions have immutable names, also memoize the\n        // output by defining the `name` property directly on this Function\n        // instance so that this polyfill will not need to be invoked again\n        if (this !== Function.prototype) {\n          Object.defineProperty(this, \"name\", {\n            value: name,\n            configurable: true\n          });\n        }\n\n        return name;\n      },\n      configurable: true\n    });\n  }\n  // For:\n  //  * Chrome <5\n  else if (canDefineGetter) {\n    // NOTE:\n    // The snippet:\n    //\n    //     x.__defineGetter__('y', z);\n    //\n    // ...is essentially equivalent to:\n    //\n    //     Object.defineProperty(x, 'y', {\n    //       get: z,\n    //       configurable: true,  // <-- key difference #1\n    //       enumerable: true     // <-- key difference #2\n    //     });\n    //\n    Function.prototype.__defineGetter__(\"name\", function() {\n      var name = _name.call(this);\n\n      // Since named function definitions have immutable names, also memoize the\n      // output by defining the `name` property directly on this Function\n      // instance so that this polyfill will not need to be invoked again\n      if (this !== Function.prototype) {\n        this.__defineGetter__(\"name\", function() { return name; });\n      }\n\n      return name;\n    });\n  }\n}\n\n})();\n"]},"metadata":{},"sourceType":"script"}