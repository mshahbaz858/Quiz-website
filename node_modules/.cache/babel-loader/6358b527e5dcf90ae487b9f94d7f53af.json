{"ast":null,"code":"import \"core-js/modules/es.regexp.exec\";\nimport \"core-js/modules/es.string.match\";\nimport { walk } from 'estree-walker';\nimport rewriteImports from './rewriteImports';\nimport getAst from './getAst';\n\nvar hasImports = function hasImports(code) {\n  return !!code.match(/import[\\S\\s]+?['\"]([^'\"]+)['\"];?/m);\n};\n/**\n * Replace ECMAScript imports with require() calls\n */\n\n\nexport default function transpileImports(code) {\n  // Don't do anything when the code has nothing that looks like an import\n  if (!hasImports(code)) {\n    return code;\n  } // Ignore errors, they should be caught by Buble\n\n\n  var ast = getAst(code);\n\n  if (!ast) {\n    return code;\n  }\n\n  var offset = 0; // estree walkers type is incompatible with acorns output\n  // it is working here out of luck and typescript is demonstrating it \n  // we have to go through the any part to keep the nodes with their `node.start`\n  // and `node.stop`\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any \n\n  walk(ast, {\n    // import foo from 'foo'\n    // import 'foo'\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any \n    enter: function enter(node) {\n      if (node.type === 'ImportDeclaration' && node.source) {\n        var start = node.start + offset;\n        var end = node.end + offset;\n        var statement = code.substring(start, end);\n        var transpiledStatement = rewriteImports(statement);\n        code = code.substring(0, start) + transpiledStatement + code.substring(end);\n        offset += transpiledStatement.length - statement.length;\n      }\n    }\n  });\n  return code;\n}","map":{"version":3,"sources":["D:/DEVELOPMENT/react-project/Quiz-react/react-quiz-app/node_modules/react-styleguidist/lib/client/utils/transpileImports.js"],"names":["walk","rewriteImports","getAst","hasImports","code","match","transpileImports","ast","offset","enter","node","type","source","start","end","statement","substring","transpiledStatement","length"],"mappings":"AAAA,OAAO,gCAAP;AACA,OAAO,iCAAP;AACA,SAASA,IAAT,QAAqB,eAArB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,IAAIC,UAAU,GAAG,SAASA,UAAT,CAAoBC,IAApB,EAA0B;AACzC,SAAO,CAAC,CAACA,IAAI,CAACC,KAAL,CAAW,mCAAX,CAAT;AACD,CAFD;AAGA;;;;;AAKA,eAAe,SAASC,gBAAT,CAA0BF,IAA1B,EAAgC;AAC7C;AACA,MAAI,CAACD,UAAU,CAACC,IAAD,CAAf,EAAuB;AACrB,WAAOA,IAAP;AACD,GAJ4C,CAI3C;;;AAGF,MAAIG,GAAG,GAAGL,MAAM,CAACE,IAAD,CAAhB;;AAEA,MAAI,CAACG,GAAL,EAAU;AACR,WAAOH,IAAP;AACD;;AAED,MAAII,MAAM,GAAG,CAAb,CAb6C,CAa7B;AAChB;AACA;AACA;AACA;;AAEAR,EAAAA,IAAI,CAACO,GAAD,EAAM;AACR;AACA;AACA;AACAE,IAAAA,KAAK,EAAE,SAASA,KAAT,CAAeC,IAAf,EAAqB;AAC1B,UAAIA,IAAI,CAACC,IAAL,KAAc,mBAAd,IAAqCD,IAAI,CAACE,MAA9C,EAAsD;AACpD,YAAIC,KAAK,GAAGH,IAAI,CAACG,KAAL,GAAaL,MAAzB;AACA,YAAIM,GAAG,GAAGJ,IAAI,CAACI,GAAL,GAAWN,MAArB;AACA,YAAIO,SAAS,GAAGX,IAAI,CAACY,SAAL,CAAeH,KAAf,EAAsBC,GAAtB,CAAhB;AACA,YAAIG,mBAAmB,GAAGhB,cAAc,CAACc,SAAD,CAAxC;AACAX,QAAAA,IAAI,GAAGA,IAAI,CAACY,SAAL,CAAe,CAAf,EAAkBH,KAAlB,IAA2BI,mBAA3B,GAAiDb,IAAI,CAACY,SAAL,CAAeF,GAAf,CAAxD;AACAN,QAAAA,MAAM,IAAIS,mBAAmB,CAACC,MAApB,GAA6BH,SAAS,CAACG,MAAjD;AACD;AACF;AAbO,GAAN,CAAJ;AAeA,SAAOd,IAAP;AACD","sourcesContent":["import \"core-js/modules/es.regexp.exec\";\nimport \"core-js/modules/es.string.match\";\nimport { walk } from 'estree-walker';\nimport rewriteImports from './rewriteImports';\nimport getAst from './getAst';\n\nvar hasImports = function hasImports(code) {\n  return !!code.match(/import[\\S\\s]+?['\"]([^'\"]+)['\"];?/m);\n};\n/**\n * Replace ECMAScript imports with require() calls\n */\n\n\nexport default function transpileImports(code) {\n  // Don't do anything when the code has nothing that looks like an import\n  if (!hasImports(code)) {\n    return code;\n  } // Ignore errors, they should be caught by Buble\n\n\n  var ast = getAst(code);\n\n  if (!ast) {\n    return code;\n  }\n\n  var offset = 0; // estree walkers type is incompatible with acorns output\n  // it is working here out of luck and typescript is demonstrating it \n  // we have to go through the any part to keep the nodes with their `node.start`\n  // and `node.stop`\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any \n\n  walk(ast, {\n    // import foo from 'foo'\n    // import 'foo'\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any \n    enter: function enter(node) {\n      if (node.type === 'ImportDeclaration' && node.source) {\n        var start = node.start + offset;\n        var end = node.end + offset;\n        var statement = code.substring(start, end);\n        var transpiledStatement = rewriteImports(statement);\n        code = code.substring(0, start) + transpiledStatement + code.substring(end);\n        offset += transpiledStatement.length - statement.length;\n      }\n    }\n  });\n  return code;\n}"]},"metadata":{},"sourceType":"module"}