{"ast":null,"code":"import \"core-js/modules/es.regexp.exec\";\nimport \"core-js/modules/es.string.replace\";\nimport find from 'lodash/find';\nimport getAst from './getAst'; // Strip semicolon (;) at the end\n\nvar unsemicolon = function unsemicolon(s) {\n  return s.replace(/;\\s*$/, '');\n};\n/**\n * Take source code and returns:\n * 1. Code before the last top-level expression.\n * 2. Code with the last top-level expression wrapped in a return statement\n *    (kind of an implicit return).\n *\n * Example:\n * var a = 1; React.createElement('i', null, a); // =>\n * 1. var a = 1\n * 2. var a = 1; return (React.createElement('i', null, a));\n */\n\n\nexport default function splitExampleCode(code) {\n  var ast = getAst(code);\n\n  if (!ast) {\n    return {\n      head: '',\n      example: code\n    };\n  }\n\n  var firstExpression = find(ast.body.reverse(), {\n    type: 'ExpressionStatement'\n  });\n\n  if (!firstExpression) {\n    return {\n      head: '',\n      example: code\n    };\n  }\n\n  var start = firstExpression.start,\n      end = firstExpression.end;\n  var head = unsemicolon(code.substring(0, start));\n  var firstExpressionCode = unsemicolon(code.substring(start, end));\n  var example = head + \";\\nreturn (\" + firstExpressionCode + \");\";\n  return {\n    head: head,\n    example: example\n  };\n}","map":{"version":3,"sources":["D:/DEVELOPMENT/react-project/Quiz-react/react-quiz-app/node_modules/react-styleguidist/lib/client/utils/splitExampleCode.js"],"names":["find","getAst","unsemicolon","s","replace","splitExampleCode","code","ast","head","example","firstExpression","body","reverse","type","start","end","substring","firstExpressionCode"],"mappings":"AAAA,OAAO,gCAAP;AACA,OAAO,mCAAP;AACA,OAAOA,IAAP,MAAiB,aAAjB;AACA,OAAOC,MAAP,MAAmB,UAAnB,C,CAA+B;;AAE/B,IAAIC,WAAW,GAAG,SAASA,WAAT,CAAqBC,CAArB,EAAwB;AACxC,SAAOA,CAAC,CAACC,OAAF,CAAU,OAAV,EAAmB,EAAnB,CAAP;AACD,CAFD;AAGA;;;;;;;;;;;;;AAaA,eAAe,SAASC,gBAAT,CAA0BC,IAA1B,EAAgC;AAC7C,MAAIC,GAAG,GAAGN,MAAM,CAACK,IAAD,CAAhB;;AAEA,MAAI,CAACC,GAAL,EAAU;AACR,WAAO;AACLC,MAAAA,IAAI,EAAE,EADD;AAELC,MAAAA,OAAO,EAAEH;AAFJ,KAAP;AAID;;AAED,MAAII,eAAe,GAAGV,IAAI,CAACO,GAAG,CAACI,IAAJ,CAASC,OAAT,EAAD,EAAqB;AAC7CC,IAAAA,IAAI,EAAE;AADuC,GAArB,CAA1B;;AAIA,MAAI,CAACH,eAAL,EAAsB;AACpB,WAAO;AACLF,MAAAA,IAAI,EAAE,EADD;AAELC,MAAAA,OAAO,EAAEH;AAFJ,KAAP;AAID;;AAED,MAAIQ,KAAK,GAAGJ,eAAe,CAACI,KAA5B;AAAA,MACIC,GAAG,GAAGL,eAAe,CAACK,GAD1B;AAEA,MAAIP,IAAI,GAAGN,WAAW,CAACI,IAAI,CAACU,SAAL,CAAe,CAAf,EAAkBF,KAAlB,CAAD,CAAtB;AACA,MAAIG,mBAAmB,GAAGf,WAAW,CAACI,IAAI,CAACU,SAAL,CAAeF,KAAf,EAAsBC,GAAtB,CAAD,CAArC;AACA,MAAIN,OAAO,GAAGD,IAAI,GAAG,aAAP,GAAuBS,mBAAvB,GAA6C,IAA3D;AACA,SAAO;AACLT,IAAAA,IAAI,EAAEA,IADD;AAELC,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID","sourcesContent":["import \"core-js/modules/es.regexp.exec\";\nimport \"core-js/modules/es.string.replace\";\nimport find from 'lodash/find';\nimport getAst from './getAst'; // Strip semicolon (;) at the end\n\nvar unsemicolon = function unsemicolon(s) {\n  return s.replace(/;\\s*$/, '');\n};\n/**\n * Take source code and returns:\n * 1. Code before the last top-level expression.\n * 2. Code with the last top-level expression wrapped in a return statement\n *    (kind of an implicit return).\n *\n * Example:\n * var a = 1; React.createElement('i', null, a); // =>\n * 1. var a = 1\n * 2. var a = 1; return (React.createElement('i', null, a));\n */\n\n\nexport default function splitExampleCode(code) {\n  var ast = getAst(code);\n\n  if (!ast) {\n    return {\n      head: '',\n      example: code\n    };\n  }\n\n  var firstExpression = find(ast.body.reverse(), {\n    type: 'ExpressionStatement'\n  });\n\n  if (!firstExpression) {\n    return {\n      head: '',\n      example: code\n    };\n  }\n\n  var start = firstExpression.start,\n      end = firstExpression.end;\n  var head = unsemicolon(code.substring(0, start));\n  var firstExpressionCode = unsemicolon(code.substring(start, end));\n  var example = head + \";\\nreturn (\" + firstExpressionCode + \");\";\n  return {\n    head: head,\n    example: example\n  };\n}"]},"metadata":{},"sourceType":"module"}